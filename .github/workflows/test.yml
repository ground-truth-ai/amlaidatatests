# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Integration Test

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build
      run: |
        python -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions-${{ matrix.python-version }}
        path: dist/

  unit-test-bq:
    needs:
    - build

    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: 3.12

      - name: Install
        run: |
          pip install -e .
          pip install -e .[duckdb]
          pip install pytest-xdist        

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: true
          export_environment_variables: true
          workload_identity_provider: '${{ secrets.CI_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.CI_SERVICE_ACCOUNT }}'

      - name: Test with pytest
        run: >
          pytest --connection_string=bigquery://${{ secrets.CI_PROJECT_NAME }}/aml_ai_input_dataset?location=US 
          --database=${{ secrets.CI_PROJECT_NAME }}.aml_ai_input_dataset -x -n=4

  unit-test-duckdb:
    needs:
    - build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          pip install -e .
          pip install -e .[duckdb]

      - name: Test with pytest
        run: |
          pytest --connection_string=duckdb://

  integration-test-bq:
    needs:
    - build

    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    # Test with a full repository
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions-3.12
          path: dist/

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: 3.12

      - name: Install
        run: |
          pip install dist/*.whl

      - name: Install Testing Dependencies
        run: |
          pip install pytest-xdist

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: true
          export_environment_variables: true
          workload_identity_provider: '${{ secrets.CI_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.CI_SERVICE_ACCOUNT }}'

      # Skip F043 (SAR test, has no SARs in our test dataset)
      - name: Test against bigquery
        run: >
          amlaidatatests --connection_string=bigquery://${{ secrets.CI_PROJECT_NAME }}?location=US
          -k "not P043" -W error
          --database=${{ secrets.CI_PROJECT_NAME }}.aml_ai_input_dataset --id=v2 -x -n=4


  integration-test-duckdb:
    needs:
    - build

    strategy:
      fail-fast: false
      matrix:
        os-version: ["windows-latest", "macos-latest"]

    runs-on: ${{ matrix.os-version }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions-3.12
          path: dist/

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: 3.12

      - name: Install Testing Dependencies
        run: |
          pip install pytest-xdist
          pip install duckdb

      - name: Install
        if: ${{ matrix.os-version != 'windows-latest' }}
        run: |
          pip install dist/*.whl

      - name: Install
        if: ${{ matrix.os-version == 'windows-latest' }}
        run: |
          Get-ChildItem -Path .\dist\*.whl -File | ForEach-Object { pip install $_.FullName }

      - name: Cache duckdb
        id: cache-duckdb
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/duckdb.ddb
          key: ${{ runner.os }}-primes

      - if: ${{ steps.cache-duckdb.outputs.cache-hit != 'true' }}
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - if: ${{ steps.cache-duckdb.outputs.cache-hit != 'true' }}
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: true
          export_environment_variables: true
          workload_identity_provider: '${{ secrets.CI_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.CI_SERVICE_ACCOUNT }}'

      - if: ${{ steps.cache-duckdb.outputs.cache-hit != 'true' }}
        name: 'Get duckdb'
        run: |
          gcloud storage cp gs://amlai-datatest-ci-bucket/duckdb.ddb ./

      - name: Integration test
        # access_mode allows parallelism in duckdb - default cores available for public
        # runners in github is 4.
        # Skip F004 (schema tests - TODO, these should probably work in duckdb)
        # Skip F043 (SAR test, has no SARs in our test dataset)
        run: >
          amlaidatatests --connection_string=duckdb://duckdb.ddb?access_mode=READ_ONLY 
          --id=1234 -x -n=4 -k "not F004 and not P043" -W error
